{"ast":null,"code":"var _jsxFileName = \"/home/mike/Scrivania/provaFrontEnd/af2_front_end_test/src/component/WalletCheck/WalletConnected.js\",\n    _s = $RefreshSig$();\n\nimport { useWeb3React } from '@web3-react/core';\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { useState, useEffect } from 'react';\nimport { Navigate } from \"react-router-dom\";\nimport User from '../../SmartContracts/Users/Users';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const injected = new InjectedConnector({\n  supportedChainIds: [1, 3, 4, 5, 42, 56, 97, 1337]\n});\nexport default function WalletConnected(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const {\n    active: networkActive,\n    error: networkError,\n    activate: activateNetwork\n  } = useWeb3React();\n  const [loaded, setLoaded] = useState(false);\n  const user = new User();\n  const [wait, setWait] = useState(false);\n\n  const player = async () => {\n    let res = await user.isUser();\n    return res;\n  };\n\n  const finish = () => {\n    setWait(true);\n  };\n\n  useEffect(() => {\n    injected.isAuthorized().then(isAuthorized => {\n      setLoaded(true);\n\n      if (isAuthorized && !networkActive && !networkError) {\n        activateNetwork(injected);\n      }\n    }).catch(() => {\n      setLoaded(true);\n    });\n    setTimeout(() => finish(), 100);\n  }, [activateNetwork, networkActive, networkError]);\n\n  if (loaded && wait) {\n    if (networkActive === true) {\n      let isuser = player();\n      console.log(isuser);\n      if (isuser !== 'Error' && isuser === true) return children;else return /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 16\n      }, this);\n    } else if (!networkActive) {\n      return /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 14\n      }, this);\n    }\n  } else return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"Loading\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 14\n  }, this);\n} //Versione scarsa\n\n/*useEffect(()=>{\n  const accountCheck=async()=>{\n    let user=new User();\n    \n    const {ethereum}=window;\n    account =await ethereum.request({ method: 'eth_accounts' })\n      .then((res)=>{\n        if(res.length>0){\n          \n          \n          setLoaded(true)\n          setNetwork(true)\n        }\n            \n              else {\n                setLoaded(true);\n              }\n              })\n            .catch(()=>{setLoaded(true)})\n         };\n  accountCheck();\n},[loaded])\n\n      if(loaded && network){\n  console.log(\"ok\");\n  return (children);}\nelse if(loaded && !network){\n  console.log(\"no ok\");\n return  <Navigate to=\"/login\"></Navigate>\n}\nelse return (<span>Loading</span>)\n*/\n\n_s(WalletConnected, \"y46J2OTq+S73xS3ieHIA15/SQd4=\", false, function () {\n  return [useWeb3React];\n});\n\n_c = WalletConnected;\n\nvar _c;\n\n$RefreshReg$(_c, \"WalletConnected\");","map":{"version":3,"sources":["/home/mike/Scrivania/provaFrontEnd/af2_front_end_test/src/component/WalletCheck/WalletConnected.js"],"names":["useWeb3React","InjectedConnector","useState","useEffect","Navigate","User","injected","supportedChainIds","WalletConnected","children","active","networkActive","error","networkError","activate","activateNetwork","loaded","setLoaded","user","wait","setWait","player","res","isUser","finish","isAuthorized","then","catch","setTimeout","isuser","console","log"],"mappings":";;;AAAA,SAASA,YAAT,QAA6B,kBAA7B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,QAAT,EAAkBC,SAAlB,QAAmC,OAAnC;AACA,SAAQC,QAAR,QAAuB,kBAAvB;AACA,OAAOC,IAAP,MAAiB,kCAAjB;;AAEA,OAAO,MAAMC,QAAQ,GAAG,IAAIL,iBAAJ,CAAsB;AAAEM,EAAAA,iBAAiB,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAA0B,IAA1B;AAArB,CAAtB,CAAjB;AAEN,eAAe,SAASC,eAAT,OAAsC;AAAA;;AAAA,MAAb;AAAEC,IAAAA;AAAF,GAAa;AACpD,QAAM;AAAEC,IAAAA,MAAM,EAAEC,aAAV;AAAyBC,IAAAA,KAAK,EAAEC,YAAhC;AAA8CC,IAAAA,QAAQ,EAAEC;AAAxD,MAA4Ef,YAAY,EAA9F;AACA,QAAM,CAACgB,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAAC,KAAD,CAApC;AACA,QAAMgB,IAAI,GAAC,IAAIb,IAAJ,EAAX;AACA,QAAM,CAACc,IAAD,EAAMC,OAAN,IAAelB,QAAQ,CAAC,KAAD,CAA7B;;AAEA,QAAMmB,MAAM,GAAC,YAAS;AACpB,QAAIC,GAAG,GAAC,MAAMJ,IAAI,CAACK,MAAL,EAAd;AACA,WAAOD,GAAP;AACD,GAHD;;AAKA,QAAME,MAAM,GAAC,MAAI;AACfJ,IAAAA,OAAO,CAAC,IAAD,CAAP;AACD,GAFD;;AAIAjB,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,QAAQ,CACLmB,YADH,GAEGC,IAFH,CAESD,YAAD,IAAkB;AACtBR,MAAAA,SAAS,CAAC,IAAD,CAAT;;AACA,UAAIQ,YAAY,IAAI,CAACd,aAAjB,IAAkC,CAACE,YAAvC,EAAqD;AACnDE,QAAAA,eAAe,CAACT,QAAD,CAAf;AACD;AACF,KAPH,EAQGqB,KARH,CAQS,MAAM;AACXV,MAAAA,SAAS,CAAC,IAAD,CAAT;AAED,KAXH;AAYEW,IAAAA,UAAU,CAAC,MAAIJ,MAAM,EAAX,EAAc,GAAd,CAAV;AACD,GAdM,EAcJ,CAACT,eAAD,EAAkBJ,aAAlB,EAAiCE,YAAjC,CAdI,CAAT;;AAiBA,MAAGG,MAAM,IAAIG,IAAb,EAAkB;AAChB,QAAGR,aAAa,KAAG,IAAnB,EAAwB;AACtB,UAAIkB,MAAM,GAACR,MAAM,EAAjB;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,UAAGA,MAAM,KAAG,OAAT,IAAoBA,MAAM,KAAG,IAAhC,EACE,OAAOpB,QAAP,CADF,KAGE,oBAAO,QAAC,QAAD;AAAU,QAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAPH,MAQK,IAAG,CAACE,aAAJ,EAAmB;AACtB,0BAAO,QAAC,QAAD;AAAU,QAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;AACF,GAZD,MAeI,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAKL,C,CAGD;;AACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GAvFyBH,e;UAC2DR,Y;;;KAD3DQ,e","sourcesContent":["import { useWeb3React } from '@web3-react/core'\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { useState,useEffect } from 'react';\nimport {Navigate} from \"react-router-dom\";\nimport User from '../../SmartContracts/Users/Users';\n\nexport const injected = new InjectedConnector({ supportedChainIds: [1, 3, 4, 5, 42, 56, 97 , 1337] });\n\n export default function WalletConnected({ children }){\n  const { active: networkActive, error: networkError, activate: activateNetwork } = useWeb3React();\n  const [loaded, setLoaded] = useState(false);\n  const user=new User();\n  const [wait,setWait]=useState(false)\n\n  const player=async()=>{\n    let res=await user.isUser();\n    return res;\n  }\n  \n  const finish=()=>{\n    setWait(true);\n  }\n\n  useEffect(() => {\n    injected\n      .isAuthorized()\n      .then((isAuthorized) => {\n        setLoaded(true)\n        if (isAuthorized && !networkActive && !networkError) {\n          activateNetwork(injected);\n        }\n      })\n      .catch(() => {\n        setLoaded(true)\n\n      });\n      setTimeout(()=>finish(),100);\n    }, [activateNetwork, networkActive, networkError])\n  \n  \n  if(loaded && wait){\n    if(networkActive===true){\n      let isuser=player();\n      console.log(isuser)\n      if(isuser!=='Error' && isuser===true)\n        return children;\n      else \n        return <Navigate to='/login'/>\n      }\n    else if(!networkActive) {\n      return <Navigate to='/login'/>\n    }\n  }\n\n    else \n      return <span>Loading</span>\n\n  \n  \n\n}\n\n\n//Versione scarsa\n  /*useEffect(()=>{\n    const accountCheck=async()=>{\n      let user=new User();\n      \n      const {ethereum}=window;\n      account =await ethereum.request({ method: 'eth_accounts' })\n        .then((res)=>{\n          if(res.length>0){\n            \n            \n            setLoaded(true)\n            setNetwork(true)\n          }\n              \n                else {\n                  setLoaded(true);\n                }\n                })\n              .catch(()=>{setLoaded(true)})\n\n          };\n    accountCheck();\n  },[loaded])\n  \n        if(loaded && network){\n    console.log(\"ok\");\n    return (children);}\n  else if(loaded && !network){\n    console.log(\"no ok\");\n   return  <Navigate to=\"/login\"></Navigate>\n  }\n  else return (<span>Loading</span>)\n  */"]},"metadata":{},"sourceType":"module"}