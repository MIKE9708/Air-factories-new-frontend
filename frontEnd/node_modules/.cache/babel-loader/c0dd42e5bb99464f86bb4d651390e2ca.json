{"ast":null,"code":"import Web3Istance from \"../Web3\";\nimport UserABI from '../../ABIs/User.json';\nexport default class User extends Web3Istance {\n  constructor() {\n    super();\n    let ABIScheduling = UserABI.abi;\n    let ContractNetworks = UserABI.networks;\n    let contractAddress = ContractNetworks[Object.keys(ContractNetworks)[Object.keys(ContractNetworks).length - 1]].address;\n    this.contract = new this.web3.eth.Contract(ABIScheduling, contractAddress); //console.log(`Indirizzo Contratto ----- `+ contractAddress);  \n  }\n\n  async addCaller(username, position, begin, end) {\n    const pos = \"latitude:\" + position.latitude + ',longitude:' + position.longitude;\n    console.log(pos);\n\n    if (begin !== undefined && end !== undefined) {\n      console.log(\"Maker\");\n      let account = await this.checkIfWalletIsConnected();\n\n      try {\n        let res = await this.contract.methods.addMaker(this.utils.fromAscii(pos), this.utils.fromAscii(username), parseInt(begin), parseInt(end)).send({\n          from: account,\n          gas: 4600000\n        }).then(res => {\n          if (res) return true;else return false;\n        });\n        return res;\n      } catch (error) {\n        return \"Error\";\n      }\n    } else {\n      try {\n        console.log(\"User\");\n        let account = await this.checkIfWalletIsConnected();\n        let res = await this.contract.methods.addCaller(this.utils.fromAscii(JSON.stringify(position)), this.utils.fromAscii(username)).send({\n          from: account,\n          gas: 4600000\n        }).then(res => {\n          if (res) return true;else return false;\n        });\n        return res;\n      } catch (error) {\n        return \"Error\";\n      }\n    }\n  }\n\n  async isUser() {\n    let account = await this.checkIfWalletIsConnected();\n    console.log(account);\n\n    try {\n      let res = await this.contract.methods.isPlayer(account).call();\n      console.log(res);\n      return res;\n    } catch (erorr) {\n      return \"Error\";\n    }\n  }\n\n  async isMaker() {\n    let account = await this.checkIfWalletIsConnected();\n\n    try {\n      let res = await this.contract.methods.isMaker(account).call();\n      console.log(res);\n      return res;\n    } catch (erorr) {\n      return \"Error\";\n    }\n  }\n\n  async getUser() {\n    let account = await this.checkIfWalletIsConnected();\n    let res = await this.contract.methods.getPlayerInfo().call({\n      from: account\n    }).then(res => {\n      console.log(res);\n    });\n    return res;\n  }\n\n}","map":{"version":3,"sources":["/home/mike/Scrivania/provaFrontEnd/af2_front_end_test/src/SmartContracts/Users/Users.js"],"names":["Web3Istance","UserABI","User","constructor","ABIScheduling","abi","ContractNetworks","networks","contractAddress","Object","keys","length","address","contract","web3","eth","Contract","addCaller","username","position","begin","end","pos","latitude","longitude","console","log","undefined","account","checkIfWalletIsConnected","res","methods","addMaker","utils","fromAscii","parseInt","send","from","gas","then","error","JSON","stringify","isUser","isPlayer","call","erorr","isMaker","getUser","getPlayerInfo"],"mappings":"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","sourcesContent":["import Web3Istance from \"../Web3\";\nimport UserABI from '../../ABIs/User.json'\n\nexport default class User extends Web3Istance{\n    constructor(){\n        super();\n        let ABIScheduling = UserABI.abi;\n        let ContractNetworks = UserABI.networks;\n        let contractAddress=ContractNetworks[Object.keys(ContractNetworks)[Object.keys(ContractNetworks).length - 1]].address;\n        this.contract=new this.web3.eth.Contract(ABIScheduling,contractAddress);\n        //console.log(`Indirizzo Contratto ----- `+ contractAddress);  \n        }\n    \n\n        async addCaller(username,position,begin,end){\n\n            const pos=\"latitude:\"+position.latitude+',longitude:'+position.longitude;\n            console.log(pos);\n            if(begin!==undefined && end!==undefined){\n                console.log(\"Maker\");\n                let account=await this.checkIfWalletIsConnected();\n                try{\n                    let res=await this.contract.methods.addMaker(this.utils.fromAscii(pos),this.utils.fromAscii(username),parseInt(begin),parseInt(end))\n                        .send({from:account,gas:4600000}).then((res)=>{\n                            if(res)\n                                return true;\n                            else return false;\n                        });\n                    return res;\n                }\n                catch(error){\n                    return \"Error\";\n                }\n            }\n            else{\n                try{\n                    console.log(\"User\");\n                    let account=await this.checkIfWalletIsConnected();\n                    \n                    let res=await this.contract.methods.addCaller(this.utils.fromAscii(JSON.stringify(position)),this.utils.fromAscii(username))\n                        .send({from:account,gas:4600000}).then((res)=>{\n                            if(res)\n                                return true;\n                            else return false;\n                        });\n                    return res;}\n                catch(error) {return\"Error\";}\n            }\n        }\n\n        async isUser(){\n            let account = await this.checkIfWalletIsConnected();\n            console.log(account);\n            try{\n                let res=await this.contract.methods.isPlayer(account).call()\n                console.log(res)\n                return res;\n            }catch(erorr){\n                return \"Error\";\n            }\n        }\n\n        async isMaker(){\n            let account = await this.checkIfWalletIsConnected();\n            try{\n                let res=await this.contract.methods.isMaker(account).call()\n                console.log(res)\n                return res;\n            }catch(erorr){\n                return \"Error\";\n            }\n\n        }\n\n        async getUser(){\n           let account=await this.checkIfWalletIsConnected();\n                let res=await this.contract.methods.getPlayerInfo().call({from:account}).then((res)=>{\n                    console.log(res);\n                })\n                \n                return res;\n\n        }\n\n\n    }"]},"metadata":{},"sourceType":"module"}