{"ast":null,"code":"import Web3Istance from \"../Web3\";\nimport OnBoardingABI from '../../ABIs/OnBoarding.json';\nexport default class OnBoarding extends Web3Istance {\n  constructor() {\n    super();\n    let ABIScheduling = OnBoardingABI.abi;\n    let ContractNetworks = OnBoardingABI.networks;\n    let contractAddress = ContractNetworks[Object.keys(ContractNetworks)[Object.keys(ContractNetworks).length - 1]].address;\n    this.contract = new this.web3.eth.Contract(ABIScheduling, contractAddress); //console.log(`Indirizzo Contratto ----- `+ contractAddress);  \n  } //address,name,materialSupported,nozzles,mountedNozzles,printTemp,bedTemp,volume,soluble,foodSafety\n\n\n  async addPrinter(printerInfo) {\n    console.log(printerInfo['material']);\n    let account = await this.checkIfWalletIsConnected();\n    console.log(printerInfo.address);\n    let res = await this.contract.methods.addPrinter(printerInfo[\"address\"], this.utils.fromAscii(printerInfo[\"name\"]), printerInfo['material'], [0, 1, 2], parseInt(printerInfo[\"nozzlesMount\"]), parseInt(printerInfo[\"printerTemp\"]), parseInt(printerInfo[\"bedTemp\"]), parseInt(printerInfo[\"volume\"]), printerInfo[\"soluble\"], printerInfo[\"foodSafety\"]).send({\n      from: account,\n      gas: 4600000\n    });\n  }\n\n  async getPrinters() {\n    let account = await this.checkIfWalletIsConnected();\n\n    try {\n      let res = await this.contract.methods.getMakerPrinters().call({\n        from: account\n      });\n      return res;\n    } catch (error) {\n      return \"Error\";\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/mike/Scrivania/provaFrontEnd/af2_front_end_test/src/SmartContracts/OnBoarding/OnBoarding.js"],"names":["Web3Istance","OnBoardingABI","OnBoarding","constructor","ABIScheduling","abi","ContractNetworks","networks","contractAddress","Object","keys","length","address","contract","web3","eth","Contract","addPrinter","printerInfo","console","log","account","checkIfWalletIsConnected","res","methods","utils","fromAscii","parseInt","send","from","gas","getPrinters","getMakerPrinters","call","error"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,SAAxB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AAEA,eAAe,MAAMC,UAAN,SAAyBF,WAAzB,CAAoC;AAC/CG,EAAAA,WAAW,GAAE;AACT;AACA,QAAIC,aAAa,GAAGH,aAAa,CAACI,GAAlC;AACA,QAAIC,gBAAgB,GAAGL,aAAa,CAACM,QAArC;AACA,QAAIC,eAAe,GAACF,gBAAgB,CAACG,MAAM,CAACC,IAAP,CAAYJ,gBAAZ,EAA8BG,MAAM,CAACC,IAAP,CAAYJ,gBAAZ,EAA8BK,MAA9B,GAAuC,CAArE,CAAD,CAAhB,CAA0FC,OAA9G;AACA,SAAKC,QAAL,GAAc,IAAI,KAAKC,IAAL,CAAUC,GAAV,CAAcC,QAAlB,CAA2BZ,aAA3B,EAAyCI,eAAzC,CAAd,CALS,CAMT;AACC,GAR0C,CAUnD;;;AACwB,QAAVS,UAAU,CAACC,WAAD,EAAa;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,WAAW,CAAC,UAAD,CAAvB;AACA,QAAIG,OAAO,GAAC,MAAM,KAAKC,wBAAL,EAAlB;AACIH,IAAAA,OAAO,CAACC,GAAR,CAAYF,WAAW,CAACN,OAAxB;AACA,QAAIW,GAAG,GAAC,MAAM,KAAKV,QAAL,CAAcW,OAAd,CAAsBP,UAAtB,CACVC,WAAW,CAAC,SAAD,CADD,EAEV,KAAKO,KAAL,CAAWC,SAAX,CAAqBR,WAAW,CAAC,MAAD,CAAhC,CAFU,EAGVA,WAAW,CAAC,UAAD,CAHD,EAIV,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAJU,EAKVS,QAAQ,CAACT,WAAW,CAAC,cAAD,CAAZ,CALE,EAMVS,QAAQ,CAACT,WAAW,CAAC,aAAD,CAAZ,CANE,EAOVS,QAAQ,CAACT,WAAW,CAAC,SAAD,CAAZ,CAPE,EAQVS,QAAQ,CAACT,WAAW,CAAC,QAAD,CAAZ,CARE,EASVA,WAAW,CAAC,SAAD,CATD,EAUVA,WAAW,CAAC,YAAD,CAVD,EAUiBU,IAVjB,CAUsB;AAACC,MAAAA,IAAI,EAACR,OAAN;AAAcS,MAAAA,GAAG,EAAC;AAAlB,KAVtB,CAAd;AAaP;;AAGY,QAAXC,WAAW,GAAE;AAEf,QAAIV,OAAO,GAAC,MAAM,KAAKC,wBAAL,EAAlB;;AACA,QAAG;AACC,UAAIC,GAAG,GAAC,MAAM,KAAKV,QAAL,CAAcW,OAAd,CAAsBQ,gBAAtB,GAAyCC,IAAzC,CAA8C;AAACJ,QAAAA,IAAI,EAACR;AAAN,OAA9C,CAAd;AACA,aAAOE,GAAP;AACH,KAHD,CAIA,OAAMW,KAAN,EAAY;AACR,aAAO,OAAP;AACH;AAEJ;;AA1C8C","sourcesContent":["import Web3Istance from \"../Web3\";\nimport OnBoardingABI from '../../ABIs/OnBoarding.json'\n\nexport default class OnBoarding extends Web3Istance{\n    constructor(){\n        super();\n        let ABIScheduling = OnBoardingABI.abi;\n        let ContractNetworks = OnBoardingABI.networks;\n        let contractAddress=ContractNetworks[Object.keys(ContractNetworks)[Object.keys(ContractNetworks).length - 1]].address;\n        this.contract=new this.web3.eth.Contract(ABIScheduling,contractAddress);\n        //console.log(`Indirizzo Contratto ----- `+ contractAddress);  \n        }\n    \n//address,name,materialSupported,nozzles,mountedNozzles,printTemp,bedTemp,volume,soluble,foodSafety\n        async addPrinter(printerInfo){\n            console.log(printerInfo['material']);\n            let account=await this.checkIfWalletIsConnected();\n                console.log(printerInfo.address);\n                let res=await this.contract.methods.addPrinter(\n                    printerInfo[\"address\"],\n                    this.utils.fromAscii(printerInfo[\"name\"]),\n                    printerInfo['material'],\n                    [0,1,2], \n                    parseInt(printerInfo[\"nozzlesMount\"]),\n                    parseInt(printerInfo[\"printerTemp\"]),\n                    parseInt(printerInfo[\"bedTemp\"]),\n                    parseInt(printerInfo[\"volume\"]),\n                    printerInfo[\"soluble\"],\n                    printerInfo[\"foodSafety\"]).send({from:account,gas:4600000});\n            \n\n        }\n\n\n    async getPrinters(){\n\n        let account=await this.checkIfWalletIsConnected();\n        try{\n            let res=await this.contract.methods.getMakerPrinters().call({from:account});\n            return res;\n        }\n        catch(error){\n            return \"Error\";\n        }\n\n    }\n\n}"]},"metadata":{},"sourceType":"module"}