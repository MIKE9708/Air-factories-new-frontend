{"ast":null,"code":"import Web3Istance from \"../Web3\";\nimport OnBoardingABI from '../../ABIs/OnBoarding.json';\nexport default class OnBoarding extends Web3Istance {\n  constructor() {\n    super();\n    let ABIScheduling = OnBoardingABI.abi;\n    let ContractNetworks = OnBoardingABI.networks;\n    let contractAddress = ContractNetworks[Object.keys(ContractNetworks)[Object.keys(ContractNetworks).length - 1]].address;\n    this.contract = new this.web3.eth.Contract(ABIScheduling, contractAddress); //console.log(`Indirizzo Contratto ----- `+ contractAddress);  \n  } //address,name,materialSupported,nozzles,mountedNozzles,printTemp,bedTemp,volume,soluble,foodSafety\n\n\n  async addPrinter(printerInfo) {\n    let account = await this.checkIfWalletIsConnected();\n    console.log(\"Chiamo\", printerInfo);\n    await this.contract.methods.addPrinter(printerInfo[\"address\"], this.utils.fromAscii(printerInfo[\"name\"]), printerInfo['material'], printerInfo['nozzles'], parseInt(printerInfo[\"nozzlesMount\"]), parseInt(printerInfo[\"printerTemp\"]), parseInt(printerInfo[\"bedTemp\"]), parseInt(printerInfo[\"volume\"]), printerInfo[\"soluble\"], printerInfo[\"foodSafety\"]).send({\n      from: account,\n      gas: 4600000\n    });\n  }\n\n  async getPrinters() {\n    let account = await this.checkIfWalletIsConnected();\n    let res = await this.contract.methods.getMakerPrinters().call({\n      from: account\n    });\n    return res;\n  }\n\n  async getPrinter(index) {\n    let account = await this.checkIfWalletIsConnected();\n\n    try {\n      let res = await this.contract.methods.getMakerPrinter(parseInt(index)).call({\n        from: account\n      });\n      return res;\n    } catch (error) {\n      return \"Error\";\n    }\n  }\n\n  async addMaterials(materialData) {\n    let account = await this.checkIfWalletIsConnected();\n    console.log(\"name \", this.utils.asciiToHex(materialData[\"materialName\"]), \"material \", materialData['material'], \"quantity \", parseInt(materialData[\"materialQuantity\"]), \"bedTemp \", parseInt(materialData[\"materialBedTemp\"]));\n    /*await this.contract.methods.addMaterials(\n        this.utils.asciiToHex(materialData[\"materialName\"]),\n        materialData['material'],\n        parseInt(materialData['color']), \n        parseInt(materialData[\"materialQuantity\"]),\n        parseInt(materialData[\"materialTemp\"]),\n        parseInt(materialData[\"materialBedTemp\"])\n            ).send({from:account,gas:4600000});*/\n\n    await this.contract.methods.addMaterials(this.utils.asciiToHex(\"dede\"), 1, 2, 10, 90, 30).send({\n      from: account,\n      gas: 4600000\n    });\n  }\n\n  async removeMaterial(name, type, index) {\n    let account = await this.checkIfWalletIsConnected();\n    await this.contract.methods.removeMaterial(name, type, index).send({\n      from: account,\n      gas: 4600000\n    });\n  }\n\n  async getMaterials() {\n    let account = await this.checkIfWalletIsConnected();\n    let res = await this.contract.methods.getMaterials().call({\n      from: account\n    });\n    console.log(res);\n    return res;\n  }\n\n  async removePrinter(index) {\n    let account = await this.checkIfWalletIsConnected();\n    await this.contract.methods.removePrinter(parseInt(index)).send({\n      from: account,\n      gas: 4600000\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/mike/Scrivania/provaFrontEnd/af2_front_end_test/src/SmartContracts/OnBoarding/OnBoarding.js"],"names":["Web3Istance","OnBoardingABI","OnBoarding","constructor","ABIScheduling","abi","ContractNetworks","networks","contractAddress","Object","keys","length","address","contract","web3","eth","Contract","addPrinter","printerInfo","account","checkIfWalletIsConnected","console","log","methods","utils","fromAscii","parseInt","send","from","gas","getPrinters","res","getMakerPrinters","call","getPrinter","index","getMakerPrinter","error","addMaterials","materialData","asciiToHex","removeMaterial","name","type","getMaterials","removePrinter"],"mappings":"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","sourcesContent":["import Web3Istance from \"../Web3\";\nimport OnBoardingABI from '../../ABIs/OnBoarding.json'\n\nexport default class OnBoarding extends Web3Istance{\n    constructor(){\n        super();\n        let ABIScheduling = OnBoardingABI.abi;\n        let ContractNetworks = OnBoardingABI.networks;\n        let contractAddress=ContractNetworks[Object.keys(ContractNetworks)[Object.keys(ContractNetworks).length - 1]].address;\n        this.contract=new this.web3.eth.Contract(ABIScheduling,contractAddress);\n        //console.log(`Indirizzo Contratto ----- `+ contractAddress);  \n        }\n    \n//address,name,materialSupported,nozzles,mountedNozzles,printTemp,bedTemp,volume,soluble,foodSafety\n        async addPrinter(printerInfo){\n            let account=await this.checkIfWalletIsConnected();\n                console.log(\"Chiamo\",printerInfo);\n                    await this.contract.methods.addPrinter(\n                        printerInfo[\"address\"],\n                        this.utils.fromAscii(printerInfo[\"name\"]),\n                        printerInfo['material'],\n                        printerInfo['nozzles'], \n                        parseInt(printerInfo[\"nozzlesMount\"]),\n                        parseInt(printerInfo[\"printerTemp\"]),\n                        parseInt(printerInfo[\"bedTemp\"]),\n                        parseInt(printerInfo[\"volume\"]),\n                        printerInfo[\"soluble\"],\n                        printerInfo[\"foodSafety\"]).send({from:account,gas:4600000});\n\n        }\n\n\n    async getPrinters(){\n\n        let account=await this.checkIfWalletIsConnected();\n            let res=await this.contract.methods.getMakerPrinters().call({from:account});\n            return res;\n        }\n\n    async getPrinter(index){\n        let account=await this.checkIfWalletIsConnected();\n        try{\n            let res=await this.contract.methods.getMakerPrinter(parseInt(index)).call({from:account});\n            return res;\n        }\n        catch(error){\n            return \"Error\";\n        }\n    }\n\n\n    async addMaterials(materialData){\n        let account=await this.checkIfWalletIsConnected();\n        console.log(\"name \",this.utils.asciiToHex(materialData[\"materialName\"]),\"material \",materialData['material'],\n            \"quantity \",parseInt(materialData[\"materialQuantity\"]),\"bedTemp \",parseInt(materialData[\"materialBedTemp\"])\n                );\n        /*await this.contract.methods.addMaterials(\n            this.utils.asciiToHex(materialData[\"materialName\"]),\n            materialData['material'],\n            parseInt(materialData['color']), \n            parseInt(materialData[\"materialQuantity\"]),\n            parseInt(materialData[\"materialTemp\"]),\n            parseInt(materialData[\"materialBedTemp\"])\n                ).send({from:account,gas:4600000});*/\n\n                await this.contract.methods.addMaterials(this.utils.asciiToHex(\"dede\"),\n                    1,\n                    2,\n                    10,\n                    90,\n                    30).send({from:account,gas:4600000});\n            }\n\n\n    async removeMaterial(name,type,index){\n        let account=await this.checkIfWalletIsConnected();\n        await this.contract.methods.removeMaterial(\n            name,\n            type,\n            index).send({from:account,gas:4600000});\n\n    }\n\n\n\n    async getMaterials(){\n        let account=await this.checkIfWalletIsConnected();\n            let res=await this.contract.methods.getMaterials().call({from:account});\n            console.log(res);\n            return res;\n\n    }\n\n\n\n    async removePrinter(index){\n        let account=await this.checkIfWalletIsConnected();\n        await this.contract.methods.removePrinter(parseInt(index)).send({from:account,gas:4600000});\n\n\n    }\n\n\n}"]},"metadata":{},"sourceType":"module"}